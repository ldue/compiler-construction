Capitalized words are productions, everything in quotation marks is a terminal/token
-> : mpas to ; | : or ; E : empty

S -> Sourcefile
Sourcefile -> PackageClause ";" ImportClause ";" TopLevelDeclaration ";"

PackageClause -> "package" "id" ";"

ImportClause -> "import" "stringLit" ";" ImportClause | "import" "(" ImportListEntry ")" ImportClause | E
ImportListEntry -> "stringLit" ";" ImportListEntry | E

TopLevelDeclaration -> "var" varDeclaration TopLevelDeclaration | "func" funcDeclaration TopLevelDeclaration| E
varDeclaration -> "id" Type ";"
funcDeclaration -> "id" "(" ParameterSignature ")" ReturnValues "{" StatementList "}"
StatementList -> "var" varDeclaration StatementList| "id" Expression StatementList| E
Expression -> "=" Ex ";"| "." FunctionCall ";"
Ex -> T Ex'
Ex' -> "+" T Ex' |"-" T Ex'| E
T -> FT'
T' -> "*"F T' | "/" F T' | E
F -> "(" Ex ")" | "id" | "intLit" | "floatLit" | "boolLit" | "stringLit" | "runeLit"
Type -> "int" | "float" | "bool" | "string" | "rune"
Lit -> "intLit" | "floatLit" | "boolLit" | "stringLit" | "runeLit"
Operator -> "+" | "-"
FunctionCall -> "id" "(" ParameterList ")"




//BNF without left recursion following
TopLevelDeclaration -> Declaration | FunctionDecl | Declaration TopLevelDeclaration | FunctionDecl TopLevelDeclaration | E
FunctionDecl -> FunctionDeclaration  FunctionBody

FunctionDeclaration -> "func" "id" "(" Parameter ")" FunctionReturn
FunctionBody -> Block
FunctionReturn -> "(" ReturnList ")" | ReturnType | E
ReturnList -> NamedReturnList | UnnamedReturnList
NamedReturnList -> TypeInstance "," NamedReturnList | TypeInstance
UnnamedReturnList -> Type "," UnnamedReturnList | Type
ReturnType -> TypeInstance | Type
Parameter -> TypeInstance | TypeInstance "," Parameter | Type | Type "," Parameter | E

TypeInstance -> "id" Type | "id" "," TypeInstance
Type -> "int" | "float" | "bool" | "string" | "rune"

Declaration -> VarDecl
VarDecl -> "var" VarSpec
VarSpec -> IdentifierList Type | IdentifierList Type "=" ExpressionList | IdentifierList ExpressionList

Statement  -> Declaration | SimpleStmt | Block | IfStmt | SwitchStmt | ForStmt
SimpleStmt -> Expression | IncDecStmt | Assignment | ShortVarDecl

IfStmt ->
SwitchStmt ->
ForStmt ->
IncDecStmt -> Expression "++" | Expression "--"
Assignment -> ExpressionList "=" ExpressionList
Block -> "{" StatementList "}"

Expression -> UnaryExpr Expression'
Expression' -> BinaryOp Expression' Expression | E
UnaryExpr = PrimaryExpr | UnaryOp UnaryExpr
BinaryOp -> "||" | "&&" | RelOp | AddOp | MulOp
RelOp -> "==" | "!=" | "<" | "<=" | ">" | ">="
AddOp -> "+" | "-" | "|" "^"
MulOp -> "*" | "/" | "%" | "<<" | ">>" | "&" | "&^"
UnaryOp -> "+" | "-" | "!" | "^" | "&" | "<-"
PrimaryExpr -> Operand

Operand -> "id" | BasicLit | "(" Expression ")"
BasicLit -> intLit | floatLit | runeLit | stringLit | boolLit
IdentifierList -> "id" | "id" "," IdentifierList
ExpressionList -> Expression | Expression "," ExpressionList
StatementList -> Statement ";"





